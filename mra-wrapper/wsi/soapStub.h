/* soapStub.h
   Generated by gSOAP 2.7.9e from ANifaces.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() : __item(NULL), soap(NULL) { }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (10)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime()  { }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (12)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int()  { }
	virtual ~xsd__int() { }
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (13)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string()  { }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_ns2__WSANTrigger
#define SOAP_TYPE_ns2__WSANTrigger (16)
/* ns2:WSANTrigger */
class SOAP_CMAC ns2__WSANTrigger : public xsd__anyType
{
public:
	int triggerID;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
	int type;	/* required element of type xsd:int */
	time_t *timeStamp;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__WSANTrigger */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__WSANTrigger() : timeStamp(NULL) { }
	virtual ~ns2__WSANTrigger() { }
};
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring
#define SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring (15)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ArrayOf_USCOREsoapenc_USCOREstring : public xsd__anyType
{
public:
	std::string **__ptr;
	int __size;
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ArrayOf_USCOREsoapenc_USCOREstring() : __ptr(NULL) { }
	virtual ~ArrayOf_USCOREsoapenc_USCOREstring() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ACSException
#define SOAP_TYPE__ns1__ACSException (20)
/* ns1:ACSException */
class SOAP_CMAC _ns1__ACSException
{
public:
	xsd__anyType *fault;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__ACSException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ACSException() : fault(NULL), soap(NULL) { }
	virtual ~_ns1__ACSException() { }
};
#endif

#ifndef SOAP_TYPE__ns7__ACSException
#define SOAP_TYPE__ns7__ACSException (22)
/* ns7:ACSException */
class SOAP_CMAC _ns7__ACSException
{
public:
	xsd__anyType *fault;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns7__ACSException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__ACSException() : fault(NULL), soap(NULL) { }
	virtual ~_ns7__ACSException() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (23)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	_ns1__ACSException *ns1__ACSException;	/* optional element of type ns1:ACSException */
	_ns7__ACSException *ns7__ACSException;	/* optional element of type ns7:ACSException */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_ns1__registerFEResponse
#define SOAP_TYPE_ns1__registerFEResponse (28)
/* ns1:registerFEResponse */
struct ns1__registerFEResponse
{
};
#endif

#ifndef SOAP_TYPE_ns1__registerFE
#define SOAP_TYPE_ns1__registerFE (32)
/* ns1:registerFE */
struct ns1__registerFE
{
public:
	std::string _feName;	/* required element of type xsd:string */
	std::string _feDescription;	/* required element of type xsd:string */
	ArrayOf_USCOREsoapenc_USCOREstring *_sapId;	/* optional element of type ArrayOfstring */
	ArrayOf_USCOREsoapenc_USCOREstring *_strLocation;	/* optional element of type ArrayOfstring */
	ArrayOf_USCOREsoapenc_USCOREstring *_sapDescription;	/* optional element of type ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_ns1__unRegisterFEResponse
#define SOAP_TYPE_ns1__unRegisterFEResponse (33)
/* ns1:unRegisterFEResponse */
struct ns1__unRegisterFEResponse
{
};
#endif

#ifndef SOAP_TYPE_ns1__unRegisterFE
#define SOAP_TYPE_ns1__unRegisterFE (36)
/* ns1:unRegisterFE */
struct ns1__unRegisterFE
{
public:
	std::string _feName;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__sendTriggerResponse
#define SOAP_TYPE_ns2__sendTriggerResponse (40)
/* ns2:sendTriggerResponse */
struct ns2__sendTriggerResponse
{
public:
	std::string result;	/* RPC return element */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__sendTrigger
#define SOAP_TYPE_ns2__sendTrigger (41)
/* ns2:sendTrigger */
struct ns2__sendTrigger
{
public:
	ns2__WSANTrigger *trigger;	/* optional element of type ns2:WSANTrigger */
};
#endif

#ifndef SOAP_TYPE_ns2__registerResponse
#define SOAP_TYPE_ns2__registerResponse (43)
/* ns2:registerResponse */
struct ns2__registerResponse
{
public:
	std::string result;	/* RPC return element */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__register
#define SOAP_TYPE_ns2__register (44)
/* ns2:register */
struct ns2__register
{
public:
	int id;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns2__unRegisterResponse
#define SOAP_TYPE_ns2__unRegisterResponse (46)
/* ns2:unRegisterResponse */
struct ns2__unRegisterResponse
{
public:
	std::string result;	/* RPC return element */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__unRegister
#define SOAP_TYPE_ns2__unRegister (47)
/* ns2:unRegister */
struct ns2__unRegister
{
public:
	int id;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns7__lookupURIResponse
#define SOAP_TYPE_ns7__lookupURIResponse (49)
/* ns7:lookupURIResponse */
struct ns7__lookupURIResponse
{
public:
	std::string _lookupURIReturn;	/* RPC return element */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns7__lookupURI
#define SOAP_TYPE_ns7__lookupURI (50)
/* ns7:lookupURI */
struct ns7__lookupURI
{
public:
	std::string _nameToResolve;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (54)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (55)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__registerFE(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _feName, std::string _feDescription, ArrayOf_USCOREsoapenc_USCOREstring *_sapId, ArrayOf_USCOREsoapenc_USCOREstring *_strLocation, ArrayOf_USCOREsoapenc_USCOREstring *_sapDescription, struct ns1__registerFEResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__unRegisterFE(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _feName, struct ns1__unRegisterFEResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__sendTrigger(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns2__WSANTrigger *trigger, std::string &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__register(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, std::string &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__unRegister(struct soap *soap, const char *soap_endpoint, const char *soap_action, int id, std::string &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns7__lookupURI(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _nameToResolve, std::string &_lookupURIReturn);

#endif

/* End of soapStub.h */
