namespace ANifaces {
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* ANifaces.h
   Generated by wsdl2h 1.2.9e from RegistrationComponent.wsdl LookupComponent.wsdl trg_producer.wsdl and /root/gsoap/soapcpp2/typemap.dat
   2007-09-24 16:43:26 GMT
   Copyright (C) 2001-2006 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://registrationcomponent"
ns2 = "urn:trg_producer"
ns3 = "urn:trg_consumer"
ns4 = "urn:trg_gui"
ns5 = "urn:consumer"
ns6 = "urn:trg"

*/

//gsoap ns1   schema namespace:	http://registrationcomponent
//gsoap ns2   schema namespace:	urn:trg_producer
//gsoap ns3   schema namespace:	urn:trg_consumer
//gsoap ns4   schema namespace:	urn:trg_gui
//gsoap ns5   schema namespace:	urn:consumer
//gsoap ns6   schema namespace:	urn:trg
//gsoap ns1   schema form:	unqualified
//gsoap ns2   schema form:	unqualified
//gsoap ns3   schema form:	unqualified
//gsoap ns4   schema form:	unqualified
//gsoap ns5   schema form:	unqualified
//gsoap ns6   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/

class xsd__anyType { _XML __item; struct soap *soap; };

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};


//  Forward declaration of class ArrayOf_USCOREsoapenc_USCOREstring.
class ArrayOf_USCOREsoapenc_USCOREstring;

//  Forward declaration of class ns2__WSANTrigger.
class ns2__WSANTrigger;

/// "urn:trg_producer":WSANTrigger is a complexType.
class ns2__WSANTrigger : public xsd__anyType
{ public:
/// Element triggerID of type xs:int.
    int                                  triggerID                      1;	///< Required element.
/// Element value of type xs:string.
    std::string                          value                          1;	///< Required element.
/// Element type of type xs:int.
    int                                  type                           1;	///< Required element.
/// Element timeStamp of type xs:dateTime.
    time_t*                              timeStamp                      0;	///< Nullable pointer.
};

/// "http://registrationcomponent":ArrayOf_soapenc_string is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of SOAP-ENC:string
class ArrayOf_USCOREsoapenc_USCOREstring : public xsd__anyType
{ public:
/// Pointer to array of std::string*.
    std::string*                        *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	RegistrationComponentSoapBinding 
//gsoap ns1  service type:	RegistrationComponent 
//gsoap ns1  service port:	http://localhost:8180/ACSFC/services/RegistrationComponent 
//gsoap ns1  service namespace:	http://registrationcomponent 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	trg_USCOREproducer 
//gsoap ns2  service type:	TriggerHandler 
//gsoap ns2  service port:	http://localhost:8020 
//gsoap ns2  service namespace:	urn:trg_producer 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns7  service name:	LookupComponentSoapBinding 
//gsoap ns7  service type:	LookupComponent 
//gsoap ns7  service port:	http://localhost:8180/ACSFC/services/LookupComponent 
//gsoap ns7  service namespace:	http://lookupcomponent 
//gsoap ns7  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref RegistrationComponentSoapBinding
  - @ref trg_USCOREproducer
  - @ref LookupComponentSoapBinding

*/

/**

@page RegistrationComponentSoapBinding Binding "RegistrationComponentSoapBinding"

@section RegistrationComponentSoapBinding_operations Operations of Binding  "RegistrationComponentSoapBinding"
  - @ref ns1__registerFE
  - @ref ns1__unRegisterFE

@section RegistrationComponentSoapBinding_ports Endpoints of Binding  "RegistrationComponentSoapBinding"
  - http://localhost:8180/ACSFC/services/RegistrationComponent

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page trg_USCOREproducer Binding "trg_USCOREproducer"

@section trg_USCOREproducer_service Service Documentation "trg_producer"
gSOAP 2.7.8c generated service definition

@section trg_USCOREproducer_operations Operations of Binding  "trg_USCOREproducer"
  - @ref ns2__sendTrigger
  - @ref ns2__register
  - @ref ns2__unRegister

@section trg_USCOREproducer_ports Endpoints of Binding  "trg_USCOREproducer"
  - http://localhost:8020

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page LookupComponentSoapBinding Binding "LookupComponentSoapBinding"

@section LookupComponentSoapBinding_operations Operations of Binding  "LookupComponentSoapBinding"
  - @ref ns7__lookupURI

@section LookupComponentSoapBinding_ports Endpoints of Binding  "LookupComponentSoapBinding"
  - http://localhost:8180/ACSFC/services/LookupComponent

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail Message                                                  *
 *                                                                            *
\******************************************************************************/

/// SOAP Fault detail message "http://registrationcomponent:ACSException"
class _ns1__ACSException
{ public:
    xsd__anyType*                       fault;
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail Message                                                  *
 *                                                                            *
\******************************************************************************/

/// SOAP Fault detail message "http://lookupcomponent:ACSException"
class _ns7__ACSException
{ public:
    xsd__anyType*                       fault;
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
    _ns1__ACSException                  *ns1__ACSException             ;	///< SOAP Fault detail message "http://registrationcomponent":ACSException
    _ns7__ACSException                  *ns7__ACSException             ;	///< SOAP Fault detail message "http://lookupcomponent":ACSException
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * RegistrationComponentSoapBinding                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__registerFE                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__registerFEResponse" of service binding "RegistrationComponentSoapBinding" operation "ns1__registerFE"
struct ns1__registerFEResponse
{
};

/// Operation "ns1__registerFE" of service binding "RegistrationComponentSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP Fault: _ns1__ACSException

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__registerFE(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         feName,
    std::string                         feDescription,
    ArrayOf_USCOREsoapenc_USCOREstring* sapId,
    ArrayOf_USCOREsoapenc_USCOREstring* strLocation,
    ArrayOf_USCOREsoapenc_USCOREstring* sapDescription,
    // response parameters:
    struct ns1__registerFEResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__registerFE(
    struct soap *soap,
    // request parameters:
    std::string                         feName,
    std::string                         feDescription,
    ArrayOf_USCOREsoapenc_USCOREstring* sapId,
    ArrayOf_USCOREsoapenc_USCOREstring* strLocation,
    ArrayOf_USCOREsoapenc_USCOREstring* sapDescription,
    // response parameters:
    struct ns1__registerFEResponse&
  );
@endcode

C++ proxy class (defined in soapRegistrationComponentSoapBindingProxy.h):
  class RegistrationComponentSoapBinding;

*/

//gsoap ns1  service method-style:	registerFE rpc
//gsoap ns1  service method-encoding:	registerFE http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	registerFE ""
//gsoap ns1  service method-fault:	registerFE _ns1__ACSException
int ns1__registerFE(
    std::string                         _feName,	///< Request parameter
    std::string                         _feDescription,	///< Request parameter
    ArrayOf_USCOREsoapenc_USCOREstring* _sapId,	///< Request parameter
    ArrayOf_USCOREsoapenc_USCOREstring* _strLocation,	///< Request parameter
    ArrayOf_USCOREsoapenc_USCOREstring* _sapDescription,	///< Request parameter
    struct ns1__registerFEResponse     &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__unRegisterFE                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__unRegisterFEResponse" of service binding "RegistrationComponentSoapBinding" operation "ns1__unRegisterFE"
struct ns1__unRegisterFEResponse
{
};

/// Operation "ns1__unRegisterFE" of service binding "RegistrationComponentSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP Fault: _ns1__ACSException

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__unRegisterFE(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         feName,
    // response parameters:
    struct ns1__unRegisterFEResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__unRegisterFE(
    struct soap *soap,
    // request parameters:
    std::string                         feName,
    // response parameters:
    struct ns1__unRegisterFEResponse&
  );
@endcode

C++ proxy class (defined in soapRegistrationComponentSoapBindingProxy.h):
  class RegistrationComponentSoapBinding;

*/

//gsoap ns1  service method-style:	unRegisterFE rpc
//gsoap ns1  service method-encoding:	unRegisterFE http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	unRegisterFE ""
//gsoap ns1  service method-fault:	unRegisterFE _ns1__ACSException
int ns1__unRegisterFE(
    std::string                         _feName,	///< Request parameter
    struct ns1__unRegisterFEResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * trg_USCOREproducer                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns2__sendTrigger                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__sendTrigger" of service binding "trg_USCOREproducer"

/**

Operation details:

Service definition of function trg_producer__sendTrigger
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__sendTrigger(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns2__WSANTrigger*                   trigger,
    // response parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__sendTrigger(
    struct soap *soap,
    // request parameters:
    ns2__WSANTrigger*                   trigger,
    // response parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaptrg_USCOREproducerProxy.h):
  class trg_USCOREproducer;

*/

//gsoap ns2  service method-style:	sendTrigger rpc
//gsoap ns2  service method-encoding:	sendTrigger http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	sendTrigger ""
int ns2__sendTrigger(
    ns2__WSANTrigger*                   trigger,	///< Request parameter
    std::string                        &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__register                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__register" of service binding "trg_USCOREproducer"

/**

Operation details:

Service definition of function trg_producer__register
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__register(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__register(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaptrg_USCOREproducerProxy.h):
  class trg_USCOREproducer;

*/

//gsoap ns2  service method-style:	register rpc
//gsoap ns2  service method-encoding:	register http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	register ""
int ns2__register(
    int                                 id,	///< Request parameter
    std::string                        &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * ns2__unRegister                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns2__unRegister" of service binding "trg_USCOREproducer"

/**

Operation details:

Service definition of function trg_producer__unRegister
  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__unRegister(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 id,
    // response parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__unRegister(
    struct soap *soap,
    // request parameters:
    int                                 id,
    // response parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaptrg_USCOREproducerProxy.h):
  class trg_USCOREproducer;

*/

//gsoap ns2  service method-style:	unRegister rpc
//gsoap ns2  service method-encoding:	unRegister http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	unRegister ""
int ns2__unRegister(
    int                                 id,	///< Request parameter
    std::string                        &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * LookupComponentSoapBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns7__lookupURI                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns7__lookupURI" of service binding "LookupComponentSoapBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  - SOAP Fault: _ns7__ACSException

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns7__lookupURI(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         nameToResolve,
    // response parameters:
    std::string                        &_lookupURIReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns7__lookupURI(
    struct soap *soap,
    // request parameters:
    std::string                         nameToResolve,
    // response parameters:
    std::string                        &_lookupURIReturn
  );
@endcode

C++ proxy class (defined in soapLookupComponentSoapBindingProxy.h):
  class LookupComponentSoapBinding;

*/

//gsoap ns7  service method-style:	lookupURI rpc
//gsoap ns7  service method-encoding:	lookupURI http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns7  service method-action:	lookupURI ""
//gsoap ns7  service method-fault:	lookupURI _ns7__ACSException
int ns7__lookupURI(
    std::string                         _nameToResolve,	///< Request parameter
    std::string                        &_lookupURIReturn	///< Response parameter
);

/* End of ANifaces.h */
}
